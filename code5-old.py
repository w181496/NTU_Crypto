import sympy
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

p = 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151
q = 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127

e = 65537

flag = 581788861819028849604486057941619390966415254053077878653962134906354590013338110809005469428056022879067145295587559787690231746970639508058101186849163634545251666072807237318293232040804252379754066724988796875005542128501130627797311445331915041017484093388581376972683044166349427306646525252846187992860040468618963138756087975061397

# start cracking

r = (p - 1) * (q - 1)

d = modinv(e, r);

dec = pow(flag, d, p * q)

print str(hex(dec))[2:-1].decode('hex')
